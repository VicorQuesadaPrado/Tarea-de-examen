#include <iostream>
#include <string>
#include <SFML/Graphics.hpp>
#include <algorithm>

using namespace std;

const int NUM_CARDS = 52;
const int NUM_CARDS_HAND = 4;
const int NUM_CARDS_TABLE = 5;
const int NUM_PLAYERS = 6;
const int INITIAL_FUNDS = 1000;

struct Card {
    string suit;
    string color;
    int value;
    sf::Sprite sprite;
};

struct Player {
    int funds;
    Card hand[NUM_CARDS_HAND];
};

void loadTextures(sf::Texture& textureCommunity, sf::Texture& texturePlayer);
void initializeCard(Card& card, const sf::Texture& texture, float posX, float posY);
bool checkClick(const sf::Sprite& card, const sf::Vector2f& click);
void fillDeck(Card deck[]);
void shuffleDeck(Card deck[]);
void dealCards(Card deck[], Player players[], int numPlayers);
string classifyHand(const Card selectedCards[], const Card tableCards[]);
void handleClicks(sf::RenderWindow& window, Card selectedCards[], int& selectedCardsCount, Player& currentPlayer, Card tableCards[]);
void drawCards(sf::RenderWindow& window, Card cards[], int numCards);
void game();

int main() {
    game();
    return 0;
}

void loadTextures(sf::Texture& textureCommunity, sf::Texture& texturePlayer) {
    // Logic to load textures
}

void initializeCard(Card& card, const sf::Texture& texture, float posX, float posY) {
    card.sprite.setTexture(texture);
    card.sprite.setPosition(posX, posY);
}

bool checkClick(const sf::Sprite& card, const sf::Vector2f& click) {
    sf::FloatRect bounds = card.getGlobalBounds();
    return bounds.contains(click);
}

void fillDeck(Card deck[]) {
    string suits[] = {"Hearts", "Diamonds", "Clubs", "Spades"};
    string colors[] = {"Red", "Red", "Black", "Black"};

    int index = 0;

    for (int i = 0; i < 13; ++i) {
        for (int j = 0; j < 4; ++j) {
            deck[index].suit = suits[i];
            deck[index].color = colors[j];
            deck[index].value = i + 2;
            index++;
        }
    }
}

void shuffleDeck(Card deck[]) {
    random_shuffle(&deck[0], &deck[NUM_CARDS]);
}

void dealCards(Card deck[], Player players[], int numPlayers) {
    int cardIndex = 0;

    for (int i = 0; i < NUM_CARDS_HAND; ++i) {
        for (int j = 0; j < numPlayers; ++j) {
            players[j].hand[i] = deck[cardIndex++];
            initializeCard(players[j].hand[i], players[j].hand[i].sprite.getTexture(), 400.0f + i * 100.0f, 800.0f);
        }
    }
}

string classifyHand(const Card selectedCards[], const Card tableCards[]) {
    int counter[NUM_CARDS] = {0};

    for (int i = 0; i < NUM_CARDS_HAND + NUM_CARDS_TABLE; ++i) {
        counter[selectedCards[i].value]++;
        counter[tableCards[i].value]++;
    }

    bool hasPair = false;
    bool hasTwoPairs = false;
    bool hasThreeOfAKind = false;
    bool hasFourOfAKind = false;
    bool hasStraight = true;

    for (int i = 0; i < NUM_CARDS; ++i) {
        if (counter[i] == 2) {
            if (hasPair) {
                hasTwoPairs = true;
            }
            hasPair = true;
        } else if (counter[i] == 3) {
            hasThreeOfAKind = true;
        } else if (counter[i] == 4) {
            hasFourOfAKind = true;
        }
    }

    for (int i = 1; i < NUM_CARDS_HAND + NUM_CARDS_TABLE; ++i) {
        if (selectedCards[i].value != selectedCards[i - 1].value + 1) {
            hasStraight = false;
            break;
        }
    }

    if (hasFourOfAKind) {
        return "Four of a Kind";
    } else if (hasThreeOfAKind) {
        return "Three of a Kind";
    } else if (hasTwoPairs) {
        return "Two Pairs";
    } else if (hasPair) {
        return "Pair";
    } else if (hasStraight) {
        return "Straight";
    } else {
        return "Nothing special";
    }
}

void handleClicks(sf::RenderWindow& window, Card selectedCards[], int& selectedCardsCount, Player& currentPlayer, Card tableCards[]) {
    sf::Event event;
    while (window.pollEvent(event)) {
        if (event.type == sf::Event::Closed) {
            window.close();
        }

        if (event.type == sf::Event::MouseButtonPressed) {
            sf::Vector2f click(event.mouseButton.x, event.mouseButton.y);

            for (int i = 0; i < NUM_CARDS_TABLE; ++i) {
                if (checkClick(tableCards[i].sprite, click)) {
                    selectedCards[selectedCardsCount++] = tableCards[i];
                    if (selectedCardsCount == NUM_CARDS_HAND) {
                        return;
                    }
                }
            }

            for (int i = 0; i < NUM_CARDS_HAND; ++i) {
                if (checkClick(currentPlayer.hand[i].sprite, click)) {
                    selectedCards[selectedCardsCount++] = currentPlayer.hand[i];
                    if (selectedCardsCount == NUM_CARDS_HAND) {
                        return;
                    }
                }
            }
        }
    }
}

void drawCards(sf::RenderWindow& window, Card cards[], int numCards) {
    for (int i = 0; i < numCards; ++i) {
        window.draw(cards[i].sprite);
    }
}

void game() {
    sf::RenderWindow window(sf::VideoMode(1000, 1000), "Poker Omaha Hi");

    sf::Texture textureCommunity, texturePlayer;
    loadTextures(textureCommunity, texturePlayer);

    Card deck[NUM_CARDS];
    Player players[NUM_PLAYERS];
    Card tableCards[NUM_CARDS_TABLE];
    Card selectedCards[NUM_CARDS_TABLE + NUM_CARDS_HAND];

    for (int i = 0; i < NUM_PLAYERS; ++i) {
        players[i].funds = INITIAL_FUNDS;
    }

    fillDeck(deck);
    shuffleDeck(deck);
    dealCards(deck, players, NUM_PLAYERS);

    for (int i = 0; i < NUM_CARDS_TABLE; ++i) {
        tableCards[i] = deck[NUM_PLAYERS * NUM_CARDS_HAND + i];
        initializeCard(tableCards[i], textureCommunity, 400.0f + i * 100.0f, 400.0f);
    }

    drawCards(window, tableCards, NUM_CARDS_TABLE);

    int currentPlayer = 0;

    while (window.isOpen()) {
        int selectedCardsCount = 0;
        handleClicks(window, selectedCards, selectedCardsCount, players[currentPlayer], tableCards);

        window.clear();
        drawCards(window, players[currentPlayer].hand, NUM_CARDS_HAND);
        drawCards(window, tableCards, NUM_CARDS_TABLE);
        window.display();

        if (selectedCardsCount == NUM_CARDS_HAND) {
            string handValue = classifyHand(selectedCards, tableCards);
            cout << "Hand Value: " << handValue << endl;
        }
    }
}
int main() {
    game();
    return 0;
}
